//: [Previous](@previous)

import Foundation


//  MARK: 闭包
/*
     特点:
     * 提前准备好的代码
     * 在需要的时候调用
     * 可以当做参数传递
 
     1 闭包类似 OC 的 block 但是比 oc 的 block 应用更广泛
        *在 OC 中 block 是匿名的函数
        *在 swift 中函数是特殊的闭包
     2 闭包的应用场景:
        * 异步执行完成回调
        * 控制器间回调
        * 自定义视图回调
     3 回调特点
        * 以参数回调处理结果
        * 返回值为 Void
 */

// 使用常量记录函数的演练
//----------------------
func sum6 (x:Int,y:Int) -> Int {
    return x + y
}
// 1 定义一个常量记录函数
let f = sum6
// 在需要的时候执行
//print(f(10,12)) //
//print(sum6(x: 10, y: 10))

//----------------------

// 2 最简单的闭包
// () -> () b1 的类型 表示是 没有参数没有返回值的函数
// 如果没有参数没有返回值 可以省略 参数表达式 连 in 都可以省略
let b1 = {
    print("哈哈")
}
    //执行闭包
    b1()

// 3 带参数的闭包
    /*注意    
        * 闭包中,参数,返回值,实现代码都写在 {}中
        * 需要使用一个关键字 'in' 分割定义和实现
        * eg {形参列表 -> 返回值类型 in // 实现代码}
    */
let b2 = {(x: Int) -> () in
    print(x)
}

b2(100)

// 4 带参数 / 返回值的闭包
let b3 = {  (x:Int) -> Int in
    return x + 200;
}

print(b3(100))







